sort_it[i1, i2] <- 0
}
if (clus_id[items_pop[i1, 2]] != clus_id[items_pop[i2, 2]] &
items_pop[i1, 1] != items_pop[i2, 1]) {
sort_it[i1, i2] <- 1
}
}
}
}
if (sum(rowSums(sort_it)) == m * (m - 1)) {
sortcorr_pop <- 1
}
else if (sum(rowSums(sort_it)) < m * (m - 1)) {
sortcorr_pop <- 0
}
as.data.frame(overall_pop)
colnames(overall_pop) = c(
"Spacing (with h²)",
"Spacing",
"Between-cluster spacing",
"Within-cluster proximity"
)
as.data.frame(clusters_pop)
colnames(clusters_pop) = c(
"Cluster",
"Items",
"Angle",
"Range",
"Between-cluster spacing",
"Within-cluster proximity"
)
as.data.frame(items_pop)
colnames(items_pop) = c(
"Cluster",
"Item",
"Angle",
"Communality",
"Item-cluster spacing",
"Distance to cluster center"
)
# --------------------------------
# --- PCA ON SIMULATED SAMPLES ---
# --------------------------------
A_samp <- matrix(0, nrow = n_simu * m, ncol = 2)
for (i_simu in 1:n_simu) {
var_s <- var[((i_simu - 1) * n + 1):(i_simu * n), ]
fit <- psych::principal(var_s, nfactors = 2, rotate = "none")
fit[["loadings"]]
A_s <- loadings(fit)
class(A_s) <- "matrix"
A_s
# -------------------------------
# --- CLUSTER-CIRC ON SAMPLES ---
# -------------------------------
cc_s <- cc_raw(A_s, p, m, q)
overall_s <- cc_s[[1]]
clusters_s <- cc_s[[2]]
items_s <- cc_s[[3]]
# ------------------------
# --- SORTING CORRECT? ---
# ------------------------
for (c in 1:p) {
c_id <- rep(c, mc[c])
if (c == 1) {
clus_id <- c_id
}
else if (c > 1) {
clus_id <- c(clus_id, c_id)
}
}
sort_it <- matrix(0, nrow = m, ncol = m)
for (i1 in 1:m) {
for (i2 in 1:m) {
if (i1 != i2) {
if (clus_id[items_s[i1, 2]] == clus_id[items_s[i2, 2]] &
items_s[i1, 1] == items_s[i2, 1]) {
sort_it[i1, i2] <- 1
}
if (clus_id[items_s[i1, 2]] == clus_id[items_s[i2, 2]] &
items_s[i1, 1] != items_s[i2, 1]) {
sort_it[i1, i2] <- 0
}
if (clus_id[items_s[i1, 2]] != clus_id[items_s[i2, 2]] &
items_s[i1, 1] == items_s[i2, 1]) {
sort_it[i1, i2] <- 0
}
if (clus_id[items_s[i1, 2]] != clus_id[items_s[i2, 2]] &
items_s[i1, 1] != items_s[i2, 1]) {
sort_it[i1, i2] <- 1
}
}
}
}
if (sum(rowSums(sort_it)) == m * (m - 1)) {
sortcorr <- 1
}
else if (sum(rowSums(sort_it)) < m * (m - 1)) {
sortcorr <- 0
}
# -------------------------------
# --- COMBINE FOR ALL SAMPLES ---
# -------------------------------
if (i_simu == 1) {
ovrl_all <- overall_s
sort_all <- sortcorr
}
if (i_simu > 1) {
ovrl_all <- rbind(ovrl_all, overall_s)
sort_all <- rbind(sort_all, sortcorr)
}
}
mean_simu <- colMeans(ovrl_all)
sd_simu <- apply(ovrl_all, 2, sd)
min_simu <- apply(ovrl_all, 2, min)
max_simu <- apply(ovrl_all, 2, max)
overall_simu <- rbind(mean_simu, sd_simu, min_simu, max_simu)
accuracy <- sum(sort_all) / n_simu * 100
simu_par <- matrix(c(n_simu, n, m, p, q), nrow = 1, ncol = 5)
as.data.frame(overall_simu)
colnames(overall_simu) = c(
"Spacing (with h²)",
"Spacing",
"Between-cluster spacing",
"Within-cluster proximity"
)
rownames(overall_simu) = c("Mean", "SD", "Minimum", "Maximum")
as.data.frame(simu_par)
colnames(simu_par) = c("Number of samples",
"Sample size",
"Items",
"Clusters",
"Precision index")
spch_dat <- cc_overall[1]
spch_sim <- mean_simu[1]
spch_sd = sd_simu[1]
cutoff <- spch_sim + 2.33 * spch_sd
comp <- cutoff - spch_dat
cat("\n")
cat("============================", "\n")
cat("RESULTS CLUSTER-CIRC SIMU", "\n")
cat("============================", "\n")
cat("\n")
cat("PARAMETERS OF THE SIMULATION")
print(knitr::kable(simu_par, "simple", digits = 3))
cat("\n")
cat("============================", "\n")
cat("POPULATION (SIMULATED)", "\n")
cat("============================", "\n")
cat("\n")
cat("The following tables show results for a simulated population with", "\n")
cat("perfect circumplex spacing of clusters, adapted for the specifications", "\n")
cat("of the empirical data: Sample size, number of clusters, number of items,", "\n")
cat("empirical within-cluster range, mean item communality.", "\n")
cat("\n")
cat("OVERALL - POPULATION")
print(knitr::kable(overall_pop, "simple", digits = 3))
cat("\n")
cat("CLUSTERS - POPULATION")
print(knitr::kable(clusters_pop, "simple", digits = 3))
cat("\n")
cat("ITEMS - POPULATION")
print(knitr::kable(items_pop, "simple", digits = 3))
if (sortcorr_pop == 1) {
cat("\n")
cat("Cluster-Circ found the intended circumplex clusters in the population.",
"\n")
} else if (sortcorr_pop == 0) {
cat("\n")
cat("Cluster-Circ did not find the intended circumplex clusters in the
population.","\n")
}
cat("\n")
cat("==================================", "\n")
cat("SAMPLES OF THE SIMULATION STUDY", "\n")
cat("==================================", "\n")
cat("\n")
cat("The following tables show results for 500 simulated samples from the population",
"\n")
cat("with perfect circumplex clusters.", "\n")
cat("\n")
cat("ACCURACY:", accuracy, "%", "\n")
cat("of the simulated samples sorted the items according to the intended circumplex clusters.",
"\n")
cat("\n")
cat("OVERALL RESULTS OF THE SIMULATED SAMPLES")
print(knitr::kable(overall_simu, "simple", digits = 3))
cat("\n")
cat("Range of all Cluster-Circ coefficients: 0-1 (0 = perfect circumplex spacing).",
"\n")
cat("\n")
cat("Spacing with h² in empirical data:", spch_dat, "\n")
cat("\n")
cat("Recommendation: Circumplex fit of the empirical data is acceptable if 'spacing",
"\n")
cat("with h²' in the empirical data is not larger than mean 'spacing with h²' + 2.33 SD",
"\n")
cat("from the simulated samples in Cluster-Circ Simu (corresponding to the cumulative",
"\n")
cat("probability of the standard normal distribution for p < .01, one-tailed).",
"\n")
if (comp >= 0) {
cat("\n")
cat("Here: Empirical 'spacing with h²' is within mean-spc_h + 2.33 SD from",
"\n")
cat("Cluster-Circ Simu -> Circumplex fit acceptable.", "\n")
}
else if (comp < 0) {
cat("\n")
cat("Here: Empirical 'spacing with h²' is larger than mean-spc_h + 2.33 SD",
"\n")
cat("from Cluster-Circ Simu -> Low circumplex fit.", "\n")
}
cat("\n")
cat("The manuscript that presents Cluster-Circ has been submitted to a peer-",
"\n")
cat ("reviewed journal. When using Cluster-Circ, please cite the preprint version",
"\n")
cat ("at the current stage of the publication process:", "\n")
cat("\n")
cat("Weide et al. (2022): Cluster-Circ: Finding item clusters for circumplex",
"\n")
cat ("instruments. PsyArxiv (preprint). https://psyarxiv.com/yf37w/")
}
}
cc_simu_check(300)
View(F_simu)
View(U_simu)
View(F_simu)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
library(ClusterCirc)
cc_simu_check(300)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
library(ClusterCirc)
cc_simu_check(300)
devtools::load_all("~/ClusterCirc")
library(ClusterCirc)
cc_simu_check(300)
library(devtools)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
library(devtools)
library(ClusterCirc)
cc_simu_check(300)
devtools::load_all(".")
cc_simu_check(300)
cc_data(file = data_ex, type = "scores", p = 3, m = 18, q = 10)
cc_simu_check(300)
data <- read_sav('Pop_A_samp1.sav')
library(haven)
data <- read_sav('Pop_A_samp1.sav')
setwd ("C:/Users/annek/sciebo - Weide-Pannen, Anneke (aweide@uni-bonn.de)@uni-bonn.sciebo.de/Arbeit Sciebo/WiMi Bonn/Forschung/Projekte/Cluster-circ analysis/Simulation Cluster-circ/user_simu")
data <- read_sav('Pop_A_samp1.sav')
View(data)
data <- data[:, 2:3]
data <- data[:, 2:3]
data <- data[, 2:3]
cc_data(file = data, type = "loadings", p = 3, m = 18, q = 10)
View(data)
type(data)
class(data)
devtools::load_all("~/ClusterCirc")
cc_data(file = data, type = "loadings", p = 3, m = 18, q = 10)
View(data)
View(data)
dim(data)
devtools::load_all("~/ClusterCirc")
devtools::load_all("~/ClusterCirc")
cc_data(file = data, type = "loadings", p = 3, m = 18, q = 10)
cc_simu(300)
library(psych)
?principal
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
View(Z_simu)
?rnorm
View(Z_simu)
corr_Z <- cor(Z_simu, method = "pearson", use = "complete.obs")
View(corr_Z)
?rnorm
?principal
z_pop <- read_sav('z_normal_samp1.sav')
prinicipal(z_pop, rotate = none)
psych::principal(Z,
nfactors = mf,
rotate = "none",
scores = TRUE)
psych::principal(z_pop, nfactors = 20, rotate = "none", scores = TRUE)
pop_loadings <- fit[["loadings"]]
fit <- psych::principal(z_pop, nfactors = 20, rotate = "none", scores = TRUE)
pop_loadings <- fit[["loadings"]]
A_pop <- loadings(fit)
class(A_pop) <- "matrix"
View(A_pop)
scores_Apop <- fit[["scores"]]
class(scores_Apop) <- "matrix"
View(scores_Apop)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
View(Fsc_simu)
View(scores_Apop)
View(z_pop)
View(scores_Apop)
set.seed(1000)
Z <- replicate(mf, expr = rnorm(n_pop))
set.seed(1000)
Z <- replicate(20, expr = rnorm(3000))
set.seed(1000)
Z <- replicate(20, expr = rnorm(3000))
fit_R <- psych::principal(Z, nfactors = mf, rotate = "none", scores = TRUE)
Z <- replicate(20, expr = rnorm(3000))
fit_R <- psych::principal(Z, nfactors = 20, rotate = "none", scores = TRUE)
fscores_R <- fit[["scores"]]
View(fscores_R)
View(Fsc_simu)
F_R <- fscores_R[, 1:18]
U_R <- fscores_R[, (18 + 1):20]
View(U_R)
View(fscores_R)
View(scores_Apop)
View(U_simu)
View(fscores_R)
View(U_simu)
View(U_R)
cc_simu_check(300)
devtools::load_all("~/ClusterCirc")
devtools::load_all(".")
cc_simu_check(300)
cc_data(file = data_ex, type = "scores", p = 3, m = 18, q = 10)
cc_simu_check(300)
View(Fsc_Rsimu)
View(F_Rsimu)
View(A_popsimu)
fit_R <- psych::principal(Z_Rsimu, nfactors = 20, rotate = "none", scores = TRUE)
fscores_R <- fit[["scores"]]
fscores_R <- fit_R[["scores"]]
U_R <- fscores_R[, 1:18]
F_R <- fscores_R[, (18 + 1):20]
set.seed(1000)
Z <- replicate(20, expr = rnorm(3000))
fit_Z <- psych::principal(Z, nfactors = 20, rotate = "none", scores = TRUE)
fscores_Z <- fit_Z[["scores"]]
U_Z <- fscores_Z[, 1:18]
F_Z <- fscores_Z[, (18 + 1):20]
setwd ("C:/Users/annek/sciebo - Weide-Pannen, Anneke (aweide@uni-bonn.de)@uni-bonn.sciebo.de/Arbeit Sciebo/WiMi Bonn/Forschung/Projekte/Cluster-circ analysis/Simulation Cluster-circ/user_simu")
install.packages('haven')
library('haven')
z_SPSS <- read_sav('z_normal_samp1.sav')
fit_SPSS <- psych::principal(z_SPSS, nfactors = 20, rotate = "none", scores = TRUE)
A_SPSS <- fit_SPSS[["loadings"]]
class(A_SPSS) <- "matrix"
fscores_SPSS <- fit_SPSS[["scores"]]
class(fscores_SPSS) <- "matrix"
U_SPSS <- fscores_SPSS[, 1:18]
F_SPSS <- fscores_SPSS[, (18 + 1):20]
View(fscores_SPSS)
library(ClusterCirc)
setwd ("C:/Users/annek/sciebo - Weide-Pannen, Anneke (aweide@uni-bonn.de)@uni-bonn.sciebo.de/Arbeit Sciebo/WiMi Bonn/Forschung/Projekte/Cluster-circ analysis/Simulation Cluster-circ/user_simu")
install.packages('haven')
library('haven')
z_SPSS <- read_sav('z_normal_samp1.sav')
fit_SPSS <- psych::principal(z_SPSS, nfactors = 20, rotate = "none", scores = TRUE)
A_SPSS <- fit_SPSS[["loadings"]]
class(A_SPSS) <- "matrix"
fscores_SPSS <- fit_SPSS[["scores"]]
class(fscores_SPSS) <- "matrix"
U_SPSS <- fscores_SPSS[, 1:18]
F_SPSS <- fscores_SPSS[, (18 + 1):20]
cc_data(file = data_ex, type = "scores", p = 3, m = 18, q = 10)
cc_simu_check(300)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
View(A_SPSS)
View(A_SPSS)
PopA_SPSS <- read_sav('Pop_A_samp1.sav')
cc_data(file = data, type = "loadings", p = 3, m = 18, q = 10)
View(PopA_SPSS)
Acirc_SPSS <- read_sav('Pop_A_samp1.sav')
class(Acirc_SPSS) <- "matrix"
Acirc_SPSS <- Acirc_SPSS[;2:3]
Acirc_SPSS <- Acirc_SPSS[,2:3]
class(Acirc_SPSS) <- "matrix"
cc_data(file = Acirc_SPSS, type = "loadings", p = 3, m = 18, q = 10)
devtools::load_all("~/ClusterCirc")
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
cc_data(file = Acirc_R, type = "loadings", p = 3, m = 18, q = 10)
devtools::load_all("~/ClusterCirc")
cc_simu_check(372)
cc_simu_check(300)
cc_data(file = data_ex, type = "scores", p = 3, m = 18, q = 10)
cc_simu_check(300)
cc_data(file = data_ex, type = "scores", p = 3, m = 18, q = 10)
devtools::load_all("~/ClusterCirc")
devtools::load_all("~/ClusterCirc")
cc_simu_check(300)
View(var1)
cc_data(file = var1, type = "scores", p = 3, m = 18, q = 10)
cc_simu(300)
devtools::load_all("~/ClusterCirc")
cc_simu(300)
IIP_data <- read_sav('IAL_sort_items.sav')
class(IIP_data) <- "matrix"
View(IIP_data)
setwd ("C:/Users/annek/sciebo - Weide-Pannen, Anneke (aweide@uni-bonn.de)@uni-bonn.sciebo.de/Arbeit Sciebo/WiMi Bonn/Forschung/Projekte/Cluster-circ analysis/Simulation Cluster-circ/user_simu")
library(devtools)
library(ClusterCirc)
devtools::load_all(".")
setwd ("C:/Users/annek/sciebo - Weide-Pannen, Anneke (aweide@uni-bonn.de)@uni-bonn.sciebo.de/Arbeit Sciebo/WiMi Bonn/Forschung/Projekte/Cluster-circ analysis/Simulation Cluster-circ/user_simu")
install.packages('haven')
library('haven')
IIP_data <- read_sav('IAL_sort_items.sav')
class(IIP_data) <- "matrix"
class(IIP_data)
data.matrix(IIP_data)
class(IIP_data)
IIP_data <- data.matrix(IIP_data)
class(IIP_data)
cc_data(IIP_data, type = "scores", p = 8, m = 64, q = 10)
devtools::load_all("~/ClusterCirc")
cc_simu(823)
devtools::load_all("~/ClusterCirc")
cc_simu(823)
library(ClusterCirc)
setwd ("C:/Users/annek/sciebo - Weide-Pannen, Anneke (aweide@uni-bonn.de)@uni-bonn.sciebo.de/Arbeit Sciebo/WiMi Bonn/Forschung/Projekte/Cluster-circ analysis/Simulation Cluster-circ/user_simu")
install.packages('haven')
library('haven')
IIP_data <- read_sav('IAL_sort_items.sav')
IIP_data <- data.matrix(IIP_data)
cc_data(IIP_data, p = 8, m = 64)
View(for_cc_simu)
mf <- 20
n_simu = 10
n_sample = 300
n_pop <- n_simu*n_sample
set.seed(1)
Z <- replicate(mf, expr = rnorm(n_pop))
View(Z)
devtools::load_all(".")
cc_simu(823)
setwd ("C:/Users/annek/sciebo - Weide-Pannen, Anneke (aweide@uni-bonn.de)@uni-bonn.sciebo.de/Arbeit Sciebo/WiMi Bonn/Forschung/Projekte/Cluster-circ analysis/Simulation Cluster-circ/user_simu")
install.packages('haven')
library('haven')
IAS_data <- read_sav('IAL_sort_items.sav')
IAS_data <- data.matrix(IIP_data)
IAS_data <- read_sav('IAL_sort_items.sav')
IAS_data <- data.matrix(IAS_data)
cc_data(IAS_data, type = "scores", p = 8, m = 64, q = 10)
cc_simu(823)
cc_simu_check(823)
devtools::load_all("~/ClusterCirc")
devtools::load_all("~/ClusterCirc")
cc_simu_check(823)
theta_d <- as.data.frame(theta_d)
View(theta_d)
View(theta_d)
devtools::load_all("~/ClusterCirc")
cc_simu(823)
devtools::load_all("~/ClusterCirc")
cc_simu(823)
library(ClusterCirc)
setwd ("C:/Users/annek/sciebo - Weide-Pannen, Anneke (aweide@uni-bonn.de)@uni-bonn.sciebo.de/Arbeit Sciebo/WiMi Bonn/Forschung/Projekte/Cluster-circ analysis/Simulation Cluster-circ/user_simu")
install.packages('haven')
library('haven')
IAS_data <- read_sav('IAL_sort_items.sav')
IAS_data <- data.matrix(IAS_data)
cc_data(IAS_data, p = 8, m = 64)
cc_simu_check(823)
devtools::load_all("~/ClusterCirc")
cc_simu_check(823)
devtools::load_all("~/ClusterCirc")
cc_simu_check(823)
devtools::load_all("~/ClusterCirc")
cc_simu_check(823)
devtools::load_all("~/ClusterCirc")
cc_simu_check(823)
devtools::load_all("~/ClusterCirc")
cc_simu_check(823)
devtools::load_all("~/ClusterCirc")
cc_simu(823)
devtools::load_all("~/ClusterCirc")
cc_simu(823)
cc_data(file = data_ex, type = "scores", p = 3, m = 18, q = 10)
devtools::load_all("~/ClusterCirc")
cc_simu(300)
devtools::load_all("~/ClusterCirc")
cc_simu(300)
cc_data(IAS_data, type = "scores", p = 8, m = 64, q = 10)
devtools::load_all("~/ClusterCirc")
cc_simu(823)
devtools::load_all("~/ClusterCirc")
n_simu(823)
cc_simu(823)
devtools::load_all(".")
cc_data(file = data_ex, type = "scores", p = 3, m = 18, q = 10)
cc_simu(n = 300, samples = 10)
devtools::load_all(".")
cc_simu(n = 300, samples = 100)
devtools::load_all(".")
cc_simu(300)
devtools::load_all(".")
devtools::load_all(".")
cc_data(file = data_ex, type = "scores", p = 3, m = 18, q = 10)
